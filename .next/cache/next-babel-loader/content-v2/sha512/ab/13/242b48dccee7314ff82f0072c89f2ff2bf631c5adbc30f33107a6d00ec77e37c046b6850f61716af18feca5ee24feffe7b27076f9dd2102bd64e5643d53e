{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/php/Documents/bluskill-next-deployee/components/styled/ToggleSwitch.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Switch, withStyles } from \"@material-ui/core\";\nexport const ToggleSwitch = withStyles(theme => ({\n  root: {\n    width: 40,\n    height: 22,\n    padding: 0,\n    margin: theme.spacing(1)\n  },\n  switchBase: {\n    padding: 1,\n    '&$checked': {\n      transform: 'translateX(16px)',\n      color: theme.palette.type === 'dark' ? theme.palette.grey[400] : theme.palette.common.white,\n      '& + $track': {\n        backgroundColor: theme.palette.primary.main,\n        opacity: 1,\n        border: 'none'\n      }\n    },\n    '&$focusVisible $thumb': {\n      color: theme.palette.primary.main // border: '2px solid #fff',\n\n    }\n  },\n  thumb: {\n    width: 20,\n    height: 20\n  },\n  track: {\n    borderRadius: 30 / 2,\n    // border: `2px solid ${theme.palette.grey[300]}`,\n    backgroundColor: theme.palette.background.default,\n    opacity: 1,\n    transition: theme.transitions.create(['background-color', 'border'])\n  },\n  checked: {},\n  focusVisible: {}\n}))((_ref) => {\n  let {\n    classes\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"classes\"]);\n\n  return /*#__PURE__*/_jsxDEV(Switch, _objectSpread({\n    focusVisibleClassName: classes.focusVisible,\n    disableRipple: true,\n    classes: {\n      root: classes.root,\n      switchBase: classes.switchBase,\n      thumb: classes.thumb,\n      track: classes.track,\n      checked: classes.checked\n    }\n  }, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n});","map":{"version":3,"sources":["/home/php/Documents/bluskill-next-deployee/components/styled/ToggleSwitch.js"],"names":["Switch","withStyles","ToggleSwitch","theme","root","width","height","padding","margin","spacing","switchBase","transform","color","palette","type","grey","common","white","backgroundColor","primary","main","opacity","border","thumb","track","borderRadius","background","default","transition","transitions","create","checked","focusVisible","classes","props"],"mappings":";;;;;;;;;;;;;AAAA,SAAQA,MAAR,EAAgBC,UAAhB,QAAiC,mBAAjC;AAEA,OAAO,MAAMC,YAAY,GAAGD,UAAU,CAAEE,KAAD,KAAY;AACjDC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,EADH;AAEJC,IAAAA,MAAM,EAAE,EAFJ;AAGJC,IAAAA,OAAO,EAAE,CAHL;AAIJC,IAAAA,MAAM,EAAEL,KAAK,CAACM,OAAN,CAAc,CAAd;AAJJ,GAD2C;AAOjDC,EAAAA,UAAU,EAAE;AACVH,IAAAA,OAAO,EAAE,CADC;AAEV,iBAAa;AACXI,MAAAA,SAAS,EAAE,kBADA;AAEXC,MAAAA,KAAK,EAAET,KAAK,CAACU,OAAN,CAAcC,IAAd,KAAuB,MAAvB,GAAgCX,KAAK,CAACU,OAAN,CAAcE,IAAd,CAAmB,GAAnB,CAAhC,GAA0DZ,KAAK,CAACU,OAAN,CAAcG,MAAd,CAAqBC,KAF3E;AAGX,oBAAc;AACZC,QAAAA,eAAe,EAAEf,KAAK,CAACU,OAAN,CAAcM,OAAd,CAAsBC,IAD3B;AAEZC,QAAAA,OAAO,EAAE,CAFG;AAGZC,QAAAA,MAAM,EAAE;AAHI;AAHH,KAFH;AAWV,6BAAyB;AACvBV,MAAAA,KAAK,EAAET,KAAK,CAACU,OAAN,CAAcM,OAAd,CAAsBC,IADN,CAEvB;;AAFuB;AAXf,GAPqC;AAuBjDG,EAAAA,KAAK,EAAE;AACLlB,IAAAA,KAAK,EAAE,EADF;AAELC,IAAAA,MAAM,EAAE;AAFH,GAvB0C;AA2BjDkB,EAAAA,KAAK,EAAE;AACLC,IAAAA,YAAY,EAAE,KAAK,CADd;AAEL;AACAP,IAAAA,eAAe,EAAEf,KAAK,CAACU,OAAN,CAAca,UAAd,CAAyBC,OAHrC;AAILN,IAAAA,OAAO,EAAE,CAJJ;AAKLO,IAAAA,UAAU,EAAEzB,KAAK,CAAC0B,WAAN,CAAkBC,MAAlB,CAAyB,CAAC,kBAAD,EAAqB,QAArB,CAAzB;AALP,GA3B0C;AAkCjDC,EAAAA,OAAO,EAAE,EAlCwC;AAmCjDC,EAAAA,YAAY,EAAE;AAnCmC,CAAZ,CAAD,CAAV,CAoCxB,UAA2B;AAAA,MAA1B;AAAEC,IAAAA;AAAF,GAA0B;AAAA,MAAZC,KAAY;;AAC7B,sBACE,QAAC,MAAD;AACE,IAAA,qBAAqB,EAAED,OAAO,CAACD,YADjC;AAEE,IAAA,aAAa,MAFf;AAGE,IAAA,OAAO,EAAE;AACP5B,MAAAA,IAAI,EAAE6B,OAAO,CAAC7B,IADP;AAEPM,MAAAA,UAAU,EAAEuB,OAAO,CAACvB,UAFb;AAGPa,MAAAA,KAAK,EAAEU,OAAO,CAACV,KAHR;AAIPC,MAAAA,KAAK,EAAES,OAAO,CAACT,KAJR;AAKPO,MAAAA,OAAO,EAAEE,OAAO,CAACF;AALV;AAHX,KAUMG,KAVN;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAnD2B,CAArB","sourcesContent":["import {Switch, withStyles} from \"@material-ui/core\";\n\nexport const ToggleSwitch = withStyles((theme) => ({\n  root: {\n    width: 40,\n    height: 22,\n    padding: 0,\n    margin: theme.spacing(1),\n  },\n  switchBase: {\n    padding: 1,\n    '&$checked': {\n      transform: 'translateX(16px)',\n      color: theme.palette.type === 'dark' ? theme.palette.grey[400] : theme.palette.common.white,\n      '& + $track': {\n        backgroundColor: theme.palette.primary.main,\n        opacity: 1,\n        border: 'none',\n      },\n    },\n    '&$focusVisible $thumb': {\n      color: theme.palette.primary.main,\n      // border: '2px solid #fff',\n    },\n  },\n  thumb: {\n    width: 20,\n    height: 20,\n  },\n  track: {\n    borderRadius: 30 / 2,\n    // border: `2px solid ${theme.palette.grey[300]}`,\n    backgroundColor: theme.palette.background.default,\n    opacity: 1,\n    transition: theme.transitions.create(['background-color', 'border']),\n  },\n  checked: {},\n  focusVisible: {},\n}))(({ classes, ...props }) => {\n  return (\n    <Switch\n      focusVisibleClassName={classes.focusVisible}\n      disableRipple\n      classes={{\n        root: classes.root,\n        switchBase: classes.switchBase,\n        thumb: classes.thumb,\n        track: classes.track,\n        checked: classes.checked,\n      }}\n      {...props}\n    />\n  );\n});\n"]},"metadata":{},"sourceType":"module"}